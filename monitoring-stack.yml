version: "3.8"

networks:
  traefik-public:
    external: true
  monitoring:
    external: true
  socketproxy:
    external: true

volumes:
  prometheus-storage: {}
  grafana-storage: {}
  alertmanager-storage: {}

configs:
  alertmanagerconfig:
    file: ./configs/alertmanager/config.yml
  prometheusconfig_alt:
    file: ./configs/prometheus/prometheus.yml
  blackboxconfig:
    file: ./configs/prometheus/blackbox.yml
  blackboxrules:
    file: ./configs/prometheus/blackbox.rules.yml
  swarmnoderules:
    file: ./configs/prometheus/swarmnode.rules.yml
  swarmtaskrules:
    file: ./configs/prometheus/swarmtask.rules.yml

services:
# ========================================================================= #
#                                 MONITORING
# ========================================================================= #
  prometheus:
    image: prom/prometheus:v2.26.0
    command:
      - "--config.file=/etc/prometheus/prometheus.yml"
      - "--storage.tsdb.path=/prometheus"
      - "--storage.tsdb.retention.time=30d"
      - "--storage.tsdb.retention.size=5GB"
      - "--log.level=debug"
    volumes:
      - prometheus-storage:/prometheus
    networks:
      - traefik-public
      - monitoring
      - socketproxy
    configs:
      - source: prometheusconfig_alt
        target: /etc/prometheus/prometheus.yml
      - source: blackboxrules
        target: /etc/prometheus/blackbox.rules.yml
      - source: swarmnoderules
        target: /etc/prometheus/swarmnode.rules.yml
      - source: swarmtaskrules
        target: /etc/prometheus/swarmtask.rules.yml
    deploy:
      replicas: 1
      placement:
        constraints:
          - node.role == manager
      labels:
        traefik.enable: "true"
        traefik.http.routers.prometheus.rule: Host(`prometheus.${DOMAIN}`)
        traefik.http.routers.prometheus.entrypoints: websecure
        traefik.http.routers.prometheus.tls.certresolver: letsencrypt
        traefik.http.middlewares.prometheusauth.basicauth.users: ${BASIC_AUTH}
        traefik.http.routers.prometheus.middlewares: prometheusauth
        traefik.http.services.prometheus.loadbalancer.server.port: 9090
        # traefik.http.routers.prometheus.middlewares: authelia@docker

  nodeexporter:
    image: prom/node-exporter:v1.1.2
    command:
      - "--path.procfs=/host/proc"
      - "--path.rootfs=/rootfs"
      - "--path.sysfs=/host/sys"
      - "--collector.filesystem.ignored-mount-points=^/(sys|proc|dev|host|etc)($$|/)"
      - "--log.level=debug"
    networks:
      - monitoring
    volumes:
      - /proc:/host/proc:ro
      - /sys:/host/sys:ro
      - /:/rootfs:ro
    deploy:
      mode: global

  blackbox:
    image: prom/blackbox-exporter:v0.19.0
    command:
      - "--config.file=/etc/prometheus/blackbox.yml"
      - "--log.level=debug"
    networks:
      - monitoring
    configs:
      - source: blackboxconfig
        target: /etc/prometheus/blackbox.yml
    deploy:
      mode: global

  cadvisor:
    image: zcube/cadvisor:v0.37.5
    networks:
      - monitoring
    command:
      - "--docker=tcp://socketproxy:2375"
      - "--housekeeping_interval=10s"
      - "--docker_only=true"
      - "--logtostderr=true"
    volumes:
      - /:/rootfs:ro
      - /var/run:/var/run:rw
      - /sys:/sys:ro
      - /var/lib/docker/:/var/lib/docker:ro
      - /sys/fs/cgroup:/cgroup:ro
      - /dev/disk/:/dev/disk:ro
    deploy:
      mode: global

  grafana:
    image: grafana/grafana:7.5.6
    user: "${PUID}:${PGID}"
    volumes:
      - grafana-storage:/var/lib/grafana
      - ./configs/grafana:/etc/grafana
    networks:
      - traefik-public
      - monitoring
    environment:
      - TZ=${TZ}
      - GF_USERS_ALLOW_SIGN_UP=false
    deploy:
      replicas: 1
      placement:
        constraints:
          - node.role == manager
      labels:
        traefik.enable: "true"
        traefik.http.routers.grafana.rule: Host(`grafana.${DOMAIN}`)
        traefik.http.routers.grafana.entrypoints: websecure
        traefik.http.middlewares.grafanaauth.basicauth.users: ${BASIC_AUTH}
        traefik.http.middlewares.grafanaauth.basicauth.removeheader: "true" # REMOVE WHEN DISABLING BASICAUTH
        traefik.http.routers.grafana.middlewares: grafanaauth
        traefik.http.routers.grafana.tls.certresolver: letsencrypt
        traefik.http.services.grafana.loadbalancer.server.port: 3000
        # traefik.http.routers.grafana.middlewares: authelia@docker

  alertmanager:
    image: prom/alertmanager:v0.22.0-rc.1
    command:
      - "--config.file=/etc/alertmanager/config.yml"
      - "--storage.path=/alertmanager"
    volumes:
      - alertmanager-storage:/alertmanager
    configs:
      - source: alertmanagerconfig
        target: /etc/alertmanager/config.yml
    networks:
      - monitoring
    deploy:
      replicas: 1
      placement:
        constraints:
          - node.role == manager
  alertmanager-discord:
    # amd64 image
    # image: benjojo/alertmanager-discord
    # arm64 image (RPi)
    image: rogerrum/alertmanager-discord:1.0.0
    environment:
      - DISCORD_WEBHOOK=${DISCORD_WEBHOOK}
    networks:
      - monitoring
    deploy:
      replicas: 1
      placement:
        constraints:
          - node.role == manager